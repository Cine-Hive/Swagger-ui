---
openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8081
  description: Generated server url
tags:
- name: NowPlaying Controller
  description: 현재 상영중인 영화 기능을 제공하는 API
- name: ReplyBookMark Controller
  description: 영화 즐겨찾기 관련 기능을 제공하는 API
- name: Animation Controller
  description: 애니메이션 정보 관련 기능을 제공하는 API
- name: UpComing Movie Controller
  description: 개봉 예정인 영화 기능을 제공하는 API
- name: Naver User App Controller
  description: 네이버 앱 로그인 API 관련 기능을 제공하는 API
- name: DisLike Controller
  description: 게시글의 싫어요를 등록, 취소 및 싫어요 수 조회 기능을 제공하는 API
- name: Like Controller
  description: 게시글의 좋아요를 등록, 취소 및 좋아요 수 조회 기능을 제공하는 API
- name: Report Controller
  description: 게시글의 신고하기 기능을 제공하는 API
- name: Search Controller
  description: 드라마 & 영화 & 애니메이션 검색 기능을 제공하는 API
- name: Popular Movie Controller
  description: 인기 영화 기능을 제공하는 API
- name: Board Controller
  description: 게시글 CRUD, 검색, 전체 조회 기능을 제공하는 API
- name: Reply Controller
  description: 영화에 대한 감상평 작성 관련 기능을 제공하는 API
- name: TopMovie Controller
  description: 평점 순위 영화 기능을 제공하는 API
- name: Google User Controller
  description: 구글 로그인 API 관련 기능을 제공하는 API
- name: Naver User Controller
  description: 네이버 로그인 API 관련 기능을 제공하는 API
- name: Kakao User App Controller
  description: 카카오 앱 로그인 API 관련 기능을 제공하는 API
- name: Drama Controller
  description: 드라마 정보 관련 기능을 제공하는 API
- name: Preferred Genre Controller
  description: 선호하는 장르 정보 관련 기능을 제공하는 API
- name: User Controller
  description: 사용자 관련 기능을 제공하는 API
- name: Movie Controller
  description: 영화 정보 관련 기능을 제공하는 API
- name: ReplyJudge Controller
  description: 좋아요/싫어요 관련 기능을 제공하는 API
- name: Bookmark Controller
  description: 게시글의 즐겨찾기를 등록, 취소 및 전체 갯수 조회 기능을 제공하는 API
- name: Comment Controller
  description: '게시글 댓글의 CURD 기능을 제공하는 API '
- name: Google User App Controller
  description: 구글 앱 로그인 API 관련 기능을 제공하는 API
paths:
  "/comment/board/{boardId}/update/{commentId}":
    put:
      tags:
      - Comment Controller
      summary: 댓글 수정
      description: 사용자가 등록한 특정 게시글의 댓글을 수정
      operationId: updateComment
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CommentDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommentDto"
  "/boards/{id}":
    put:
      tags:
      - Board Controller
      summary: 게시글 글 수정
      description: 사용자가 등록한 게시글에 대한 글을 수정
      operationId: updateBoard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateBoardRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Board"
  "/update_upcoming_movie":
    post:
      tags:
      - UpComing Movie Controller
      summary: 개봉 예정중인 영화 수동으로 DB에 저장
      description: API로 받아온 개봉 예정인 영화 목록을 upcoming 테이블에 저장
      operationId: getUpComingMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/update_top_movie":
    post:
      tags:
      - TopMovie Controller
      summary: 평점 순위 영화 수동으로 DB에 저장
      description: api로 받아온 평점 순위 영화 목록을 topmovie 테이블에 저장
      operationId: getTopMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/update_popular_movie":
    post:
      tags:
      - Popular Movie Controller
      summary: 인기 영화 수동으로 DB에 저장
      description: API로 받아온 인기 영화 목록을 popular 테이블에 저장
      operationId: getPopularMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/update_now_playing":
    post:
      tags:
      - NowPlaying Controller
      summary: 현재 상영중인 영화 수동으로 DB에 저장
      description: 현재 상영중인 영화 목록을 movie 테이블에 저장
      operationId: getNowPlayingMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/search":
    post:
      tags:
      - Search Controller
      summary: 클라이언트 검색
      description: 검색어를 받아 해당 검색어를 포함하는 Moive(animation 제외), 드라마(애니메이션 제외), 애니메이션을
        반환
      operationId: searchMovies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/report/{boardId}":
    post:
      tags:
      - Report Controller
      summary: 신고하기 등록
      description: 특정 게시글에 대해 사용자가 신고하기를 등록
      operationId: reportBoard
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/reply":
    post:
      tags:
      - Reply Controller
      summary: 감상평 등록
      description: reply 테이블에 새로운 감상평을 등록하고, memnickname, mememail, movieId, content를
        파라미터로 받아 저장
      operationId: createReply
      parameters:
      - name: memNickname
        in: query
        required: true
        schema:
          type: string
      - name: movieId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: content
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/reply/judge/like":
    post:
      tags:
      - ReplyJudge Controller
      summary: 감상평에 좋아요 등록
      description: reply_likes 테이블에 해당 감상평 추가
      operationId: toggleLike
      parameters:
      - name: movieId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: replyId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/reply/judge/dislike":
    post:
      tags:
      - ReplyJudge Controller
      summary: 감상평에 싫어요 등록
      description: reply_dislikes 테이블에 해당 감상평 추가
      operationId: toggleDislike
      parameters:
      - name: movieId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: replyId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/reply/bookmark/toggle":
    post:
      tags:
      - ReplyBookMark Controller
      operationId: toggleBookmark
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReplyDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/register":
    post:
      tags:
      - User Controller
      summary: 회원가입
      description: 사용자 정보를 입력받아 일반 회원가입을 진행, 중복 검사 통과 후 user 테이블에 저장
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: object
  "/preferredGenres":
    post:
      tags:
      - Preferred Genre Controller
      summary: 선호 장르 선택
      description: 사용자가 드라마,영화,애니메이션 중 선택한 장르에 맞는 영상 반환
      operationId: getContentByGenres
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PreferredGenereDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Content"
  "/login":
    post:
      tags:
      - User Controller
      summary: 로그인
      description: user 테이블에 사용자가 입력한 ID와 비밀번호 쌍이 맞는지 확인 후 로그인
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: object
  "/like/{boardId}":
    post:
      tags:
      - Like Controller
      summary: 좋아요 등록
      description: 특정 게시글에 대해 좋아요를 등록
      operationId: addLike
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
    delete:
      tags:
      - Like Controller
      summary: 좋아요 취소
      description: 특정 게시글에 대해 등록한 좋아요를 취소
      operationId: removeLike
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/dislike/{boardId}":
    post:
      tags:
      - DisLike Controller
      summary: 싫어요 등록
      description: 특정 게시글에 대한 싫어요를 등록
      operationId: addDisLike
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
    delete:
      tags:
      - DisLike Controller
      summary: 싫어요 취소
      description: 특정 게시글에 대해 등록한 싫어요를 취소
      operationId: removeDisLike
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/comment/{boardId}":
    post:
      tags:
      - Comment Controller
      summary: 댓글 등록
      description: 특정 게시글에 대한 댓글을 추가
      operationId: addComment
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CommentDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommentDto"
  "/bookmark/{boardId}":
    post:
      tags:
      - Bookmark Controller
      summary: 즐겨찾기 등록
      description: 특정 게시글의 즐겨찾기를 등록
      operationId: addBookmark
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
    delete:
      tags:
      - Bookmark Controller
      summary: 즐겨찾기 취소
      description: 특정 게시글에 대해 등록한 즐겨찾기를 삭제
      operationId: removeBookmark
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/boards/create":
    post:
      tags:
      - Board Controller
      summary: 게시글 글 등록
      description: 게시판 기능에서 글 등록
      operationId: createBoard
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateBoardDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Board"
  "/api/auth/naver/register":
    post:
      tags:
      - Naver User App Controller
      summary: 네이버 사용자 등록
      description: 네이버 사용자 정보를 입력받아 회원가입을 진행, 중복 검사 통과 후 naver_user 테이블에 저장
      operationId: registerUserDetails
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/auth/naver/app-login":
    post:
      tags:
      - Naver User App Controller
      summary: 네이버 앱 로그인
      description: '앱에서 SDK를 실행 후 인증 및 로그인이 성공된 후, 앱에서 Access Token을 담아서 요청을 보내면 서버에서
        json 데이터를 클라이언트에게 보내야 할 요청코드 '
      operationId: naverAppLogin
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/kakao/register":
    post:
      tags:
      - Kakao User App Controller
      summary: 카카오 사용자 회원가입
      description: 카카오 로그인 후, 사용자가 추가 정보를 입력하면 이를 기반으로 사용자 정보를 저장
      operationId: registerUserDetails_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/auth/kakao/app-login":
    post:
      tags:
      - Kakao User App Controller
      operationId: kakaoAppLogin
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/google/register":
    post:
      tags:
      - Google User App Controller
      summary: 구글 사용자 회원가입
      description: 구글 로그인 후, 사용자가 추가 정보를 입력하면 이를 기반으로 사용자 정보를 저장
      operationId: registerUserDetails_2
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/auth/google/app-login":
    post:
      tags:
      - Google User App Controller
      summary: 구글 앱 로그인
      description: '앱에서 SDK를 실행 후 인증 및 로그인이 성공된 후, 앱에서 Access Token을 담아서 요청을 보내면 서버에서
        json 데이터를 클라이언트에게 보내야 할 요청코드 '
      operationId: kakaoAppLogin_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/reply/user/{email}":
    get:
      tags:
      - Reply Controller
      summary: 특정 사용자의 모든 감상평 조회
      description: reply 테이블에 등록된 감상평 중 해당 email에 해당하는 모든 감상평을 조회
      operationId: getReplysByMemEmail
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Reply"
  "/reply/movie/{movieId}":
    get:
      tags:
      - Reply Controller
      summary: '해당 영화에 등록된 감상평 조회 '
      description: reply 테이블에 있는 감상평 중 해당 movieId에 해당하는 모든 감상평을 조회
      operationId: getReplysByMovie
      parameters:
      - name: movieId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Reply"
  "/reply/judge/count/like":
    get:
      tags:
      - ReplyJudge Controller
      summary: 감상평에 등록된 좋아요 카운트
      description: reply_likes 테이블에 replyId로 조회하여 좋아요 수 반환
      operationId: getLikeCount
      parameters:
      - name: replyId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int64
  "/reply/judge/count/dislike":
    get:
      tags:
      - ReplyJudge Controller
      summary: 감상평에 등록된 싫어요 카운트
      description: reply_dislikes 테이블에 replyId로 조회하여 싫어요 수 반환
      operationId: getDisLikeCount
      parameters:
      - name: replyId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int64
  "/reply/bookmark/count":
    get:
      tags:
      - ReplyBookMark Controller
      summary: 해당 영화의 즐겨찾기 수 조회
      description: reply_bookmark 테이블에 해당 영화의 즐겨찾기 수를 movie_id로 조회
      operationId: getBookmarkCount
      parameters:
      - name: movieId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int64
  "/now_playing":
    get:
      tags:
      - NowPlaying Controller
      summary: 현재 상영중인 영화 조회
      description: movie 테이블에 저장된 movie 정보를 리스트 형태로 반환
      operationId: getNowPlayingMoviesList
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/NowPlayingMovieDto"
  "/movies":
    get:
      tags:
      - Movie Controller
      summary: DB에서 영화 받아오기
      description: movie 테이블에 저장된 모든 movie 정보를 리스트 형태로 반환
      operationId: getAllMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Movie"
  "/movies/{id}":
    get:
      tags:
      - Movie Controller
      summary: 영화 상세 페이지 조회
      description: 해당 Moive ID로 영화 상세 정보를 상세 페이지에 반환, 존재하지 않는 경우 404 응답을 반환
      operationId: getMovieById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Movie"
  "/movies/{id}/similar":
    get:
      tags:
      - Movie Controller
      summary: 관련 추천 영화 조회
      description: 특정 영화 ID로 TMDB의 추천 영화 목록을 가져옴
      operationId: getSimilarMovies
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Movie"
  "/like/{boardId}/count":
    get:
      tags:
      - Like Controller
      summary: 좋아요 갯수 조회
      description: 특정 게시글에 대해 좋아요의 총 갯수를 조회
      operationId: getLikeCount_1
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int32
  "/get_upcoming_movies":
    get:
      tags:
      - UpComing Movie Controller
      summary: 개봉 예정중인 영화 조회
      description: upcoming 테이블에 저장된 개봉 예정 영화 정보를 리스트 형태로 반환
      operationId: getTopRatedMoviesList
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UpComingMovieDto"
  "/get_topmovies":
    get:
      tags:
      - TopMovie Controller
      summary: 평점순 영화 조회
      description: topmovie 테이블에 저장된 topmovie 정보를 리스트 형태로 반환
      operationId: getTopRatedMoviesList_1
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TopRatedMovieDto"
  "/get_popular_movies":
    get:
      tags:
      - Popular Movie Controller
      summary: 인기 영화 조회
      description: popular 테이블에 저장된 인기 영화 정보를 리스트 형태로 반환
      operationId: getTopRatedMoviesList_2
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PopularMovieDto"
  "/dramas":
    get:
      tags:
      - Drama Controller
      summary: Drama 목록 받아오기
      description: drama 테이블에 저장된 모든 drama 정보를 리스트 형태로 반환
      operationId: getDramas
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Drama"
  "/dramas/{id}":
    get:
      tags:
      - Drama Controller
      summary: Drama 상세 페이지 받아오기
      description: 해당 Drama ID로 영화 상세 정보를 상세 페이지에 반환, 존재하지 않는 경우 404 응답을 반환
      operationId: getDramaById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Drama"
  "/dislike/{boardId}/count":
    get:
      tags:
      - DisLike Controller
      summary: 싫어요 갯수 조회
      description: 특정 게시글에 대해 싫어요의 총 갯수를 조회
      operationId: getDisLikeCount_1
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int32
  "/comment/all/board/{boardId}":
    get:
      tags:
      - Comment Controller
      summary: 댓글 조회
      description: 특정 게시글의 전채 댓글 수 조회
      operationId: getCommentsByBoard
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CommentDto"
  "/checknickname/{memNickname}":
    get:
      tags:
      - User Controller
      summary: 닉네임 중복 확인
      description: user 테이블에 해당 닉네임이 이미 등록되어 있는지 확인
      operationId: checkmemNickname
      parameters:
      - name: memNickname
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: boolean
  "/checkemail/{memEmail}":
    get:
      tags:
      - User Controller
      summary: 이메일 중복 확인
      description: user 테이블에 해당 이메일이 이미 등록되어 있는지 확인
      operationId: checkmemEmail
      parameters:
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: boolean
  "/bookmark/{boardId}/count":
    get:
      tags:
      - Bookmark Controller
      summary: 즐겨찾기 수 조회
      description: 특정 게시글에 대해 전체 즐겨찾기 수 조회
      operationId: getBookmarkCount_1
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int32
  "/boards":
    get:
      tags:
      - Board Controller
      summary: 게시글 리스트 조회
      description: 사용자들이 등록한 게시글들의 전체 목록을 조회
      operationId: getBoards
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/GetListBoardDto"
  "/boards/search":
    get:
      tags:
      - Board Controller
      summary: 게시글 검색
      description: 제목, 내용 및 닉네임을 포함하여 등록한 게시글을 모두 검색
      operationId: searchBoards
      parameters:
      - name: keyword
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BoardSearchDto"
  "/boards/detail/{id}":
    get:
      tags:
      - Board Controller
      summary: 게시글 상세 페이지
      description: 등록한 게시글에 대한 상세 페이지
      operationId: getDetailBoard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BoardDto"
  "/api/auth/naver":
    get:
      tags:
      - Naver User Controller
      summary: 네이버 로그인 리다이렉션
      description: 사용자를 네이버 OAuth 로그인 페이지로 리다이렉션하여 네이버 인증을 시작
      operationId: naverLoginRedirect
      responses:
        '200':
          description: OK
  "/api/auth/naver/success":
    get:
      tags:
      - Naver User Controller
      summary: 네이버 로그인 성공 페이지
      description: 네이버 로그인 성공 시 사용자 정보를 반환
      operationId: naverSuccessPage
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/naver/login/success":
    get:
      tags:
      - Naver User Controller
      summary: 네이버 로그인 성공 정보 반환
      description: 세션에서 네이버 로그인한 사용자 정보를 가져와 반환, 인증되지 않은 사용자는 401 오류를 반환
      operationId: loginSuccessPage
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/naver/callback":
    get:
      tags:
      - Naver User Controller
      summary: 네이버 OAuth 로그인 및 사용자 등록
      description: 네이버 OAuth 인증 후 사용자 정보를 이용하여 로그인하거나, 신규 사용자를 등록하고 로그인 후 사용자를 리다이렉션
      operationId: naverCallback
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      - name: state
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
  "/api/auth/kakao":
    get:
      tags:
      - request-kakao-web-controller
      summary: 카카오 로그인
      description: 카카오 OAuth 로그인 페이지로 사용자를 리다이렉션하여 카카오 인증을 시작
      operationId: kakaoLogin
      responses:
        '200':
          description: OK
  "/api/auth/kakao/success":
    get:
      tags:
      - request-kakao-web-controller
      summary: 카카오 로그인 성공 정보 반환
      description: 세션에서 카카오 로그인한 사용자 정보를 가져와 반환, 인증되지 않은 사용자는 401 오류를 반환
      operationId: successPage
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/kakao/login/success":
    get:
      tags:
      - request-kakao-web-controller
      summary: 카카오 로그인 성공 정보 반환
      description: 세션에서 카카오 로그인한 사용자 정보를 가져와 반환, 인증되지 않은 사용자는 401 오류를 반환
      operationId: loginSuccessPage_1
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/kakao/callback":
    get:
      tags:
      - request-kakao-web-controller
      summary: 카카오 OAuth 로그인 및 사용자 등록
      description: 카카오 OAuth 인증 후 사용자 정보를 이용하여 로그인하거나, 신규 사용자를 등록하고 로그인 후 사용자를 리다이렉션
      operationId: kakaoCallback
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
  "/api/auth/google":
    get:
      tags:
      - Google User Controller
      summary: 구글 로그인 리다이렉션
      description: 사용자를 구글 OAuth 로그인 페이지로 리다이렉션하여 구글 인증을 시작
      operationId: googleLoginRedirect
      responses:
        '200':
          description: OK
  "/api/auth/google/success":
    get:
      tags:
      - Google User Controller
      summary: 구글 인증 성공
      description: 구글 OAuth 인증 성공 후 세션에 저장된 사용자 정보를 반환, 사용자가 인증되지 않은 경우 401 상태 코드와
        함께 오류 메시지를 반환
      operationId: googleSuccessPage
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/google/login/success":
    get:
      tags:
      - Google User Controller
      summary: 구글 로그인 성공 정보 반환
      description: 세션에서 구글 로그인한 사용자 정보를 가져와 반환, 인증되지 않은 사용자는 401 오류를 반환
      operationId: loginSuccessPage_2
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/google/callback":
    get:
      tags:
      - Google User Controller
      summary: 구글 OAuth 로그인 및 사용자 등록
      description: 구글 OAuth 인증 후 구글 사용자 정보를 이용하여 로그인하거나 신규 사용자를 등록, 인증 후 해당 사용자를 리다이렉션
      operationId: googleCallback
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
  "/animations":
    get:
      tags:
      - Animation Controller
      summary: Animation 목록 받아오기
      description: animation 테이블에 저장된 모든 animation 정보를 리스트 형태로 반환
      operationId: getMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Animation"
  "/animations/{id}":
    get:
      tags:
      - Animation Controller
      summary: Animation 상세 페이지 받아오기
      description: 해당 Animation ID로 Animation 정보를 상세 페이지에 반환, 존재하지 않는 경우 404 응답을 반환
      operationId: getAnimationById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Animation"
  "/animations/{id}/similar":
    get:
      tags:
      - Animation Controller
      summary: 관련 추천 애니메이션 조회
      description: 특정 애니메이션 ID로 TMDB의 추천 애니메이션 목록을 가져옴
      operationId: getSimilarAnimations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Animation"
  "/reply/{movieId}/{replyId}":
    delete:
      tags:
      - Reply Controller
      summary: 감상평 삭제
      description: 특정 영화에 등록된 특정 감상평을 삭제
      operationId: deleteReply
      parameters:
      - name: movieId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: replyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/comment/board/{boardId}/delete/{commentId}":
    delete:
      tags:
      - Comment Controller
      summary: 댓글 삭제
      description: 사용자가 등록한 특정 게시글의 댓글을 삭제
      operationId: deleteComment
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
  "/boards/delete/{id}":
    delete:
      tags:
      - Board Controller
      summary: 게시글 글 삭제
      description: 사용자가 등록한 게시글에 대한 삭제
      operationId: deleteBoard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
components:
  schemas:
    CommentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        memNickname:
          type: string
        memEmail:
          type: string
        brgRedDate:
          type: string
          format: date-time
    UpdateBoardRequest:
      type: object
      properties:
        memEmail:
          type: string
        brdTitle:
          type: string
        brdContent:
          type: string
    Board:
      type: object
      properties:
        id:
          type: integer
          format: int64
        memEmail:
          type: string
        brdTitle:
          type: string
        brdContent:
          type: string
        brdRegDate:
          type: string
          format: date-time
        views:
          type: integer
          format: int32
        likes:
          type: array
          items:
            "$ref": "#/components/schemas/BoardLike"
        likeCount:
          type: integer
          format: int32
        dislikes:
          type: array
          items:
            "$ref": "#/components/schemas/BoardDisLike"
        dislikeCount:
          type: integer
          format: int32
          writeOnly: true
        reportCount:
          type: integer
          format: int32
        reports:
          type: array
          items:
            "$ref": "#/components/schemas/Report"
        user:
          "$ref": "#/components/schemas/User"
        bookmarks:
          type: array
          items:
            "$ref": "#/components/schemas/Bookmark"
        bookmarkCount:
          type: integer
          format: int32
        comments:
          type: array
          items:
            "$ref": "#/components/schemas/Comment"
        commentCount:
          type: integer
          format: int32
        disLikeCount:
          type: integer
          format: int32
    BoardDisLike:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        board:
          "$ref": "#/components/schemas/Board"
    BoardLike:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        board:
          "$ref": "#/components/schemas/Board"
    Bookmark:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        board:
          "$ref": "#/components/schemas/Board"
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        board:
          "$ref": "#/components/schemas/Board"
        user:
          "$ref": "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
    LoginHistory:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        firstLoginDate:
          type: string
          format: date-time
        lastLoginDate:
          type: string
          format: date-time
        browser:
          type: string
    Report:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        board:
          "$ref": "#/components/schemas/Board"
        reason:
          type: string
        reportedAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        mem_id:
          type: integer
          format: int64
        memPw:
          type: string
        memEmail:
          type: string
        memName:
          type: string
        memNickname:
          type: string
        memSex:
          type: string
        memRegisterDatetime:
          type: string
          format: date-time
        memType:
          type: string
        genres:
          type: array
          items:
            type: string
        loginHistories:
          type: array
          items:
            "$ref": "#/components/schemas/LoginHistory"
    ReplyDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        memEmail:
          type: string
        movieId:
          type: integer
          format: int64
        replyContent:
          type: string
        memNickname:
          type: string
        replyRegDate:
          type: string
          format: date-time
    UserDto:
      type: object
      properties:
        exists:
          type: boolean
        mem_id:
          type: integer
          format: int64
        memPassword:
          type: string
        memName:
          type: string
        memEmail:
          type: string
        memNickname:
          type: string
        memSex:
          type: string
        memType:
          type: string
        memRegisterDatetime:
          type: string
        genres:
          type: array
          items:
            type: string
    PreferredGenereDto:
      type: object
      properties:
        genres:
          type: array
          items:
            type: string
    Content:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        genre:
          type: string
    LoginDto:
      type: object
      properties:
        memEmail:
          type: string
        memPassword:
          type: string
    CreateBoardDto:
      type: object
      properties:
        memEmail:
          type: string
        brdTitle:
          type: string
        brdContent:
          type: string
    Reply:
      type: object
      properties:
        id:
          type: integer
          format: int64
        memEmail:
          type: string
        movieId:
          type: integer
          format: int64
        reviewContent:
          type: string
        memNickname:
          type: string
        replyRegDate:
          type: string
          format: date-time
    NowPlayingMovieDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        posterPath:
          type: string
        title:
          type: string
        releaseDate:
          type: string
        genres:
          type: array
          items:
            type: string
    Actor:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        posterPath:
          type: string
    Director:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        backDropPath:
          type: string
        releaseDate:
          type: string
          format: date
        genres:
          type: array
          items:
            "$ref": "#/components/schemas/Genre"
        voteAverage:
          type: number
          format: double
        popularity:
          type: number
          format: double
        actors:
          type: array
          items:
            "$ref": "#/components/schemas/Actor"
        videos:
          type: array
          items:
            "$ref": "#/components/schemas/Video"
        director:
          "$ref": "#/components/schemas/Director"
        runtime:
          type: integer
          format: int32
        recommendedMovieIds:
          type: array
          items:
            type: integer
            format: int64
    Video:
      type: object
      properties:
        id:
          type: integer
          format: int64
        videoKey:
          type: string
        name:
          type: string
    UpComingMovieDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        posterPath:
          type: string
        title:
          type: string
        releaseDate:
          type: string
        genres:
          type: array
          items:
            type: string
    TopRatedMovieDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        posterPath:
          type: string
        title:
          type: string
        releaseDate:
          type: string
        genres:
          type: array
          items:
            type: string
    PopularMovieDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        posterPath:
          type: string
        title:
          type: string
        releaseDate:
          type: string
        genres:
          type: array
          items:
            type: string
    Drama:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        backDropPath:
          type: string
        firstAirDate:
          type: string
        voteAverage:
          type: number
          format: double
        popularity:
          type: number
          format: double
        directors:
          type: array
          items:
            "$ref": "#/components/schemas/Director"
        genres:
          type: array
          items:
            "$ref": "#/components/schemas/Genre"
        actors:
          type: array
          items:
            "$ref": "#/components/schemas/Actor"
    GetListBoardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        brdTitle:
          type: string
        brdContent:
          type: string
        memNickname:
          type: string
        brgRegDate:
          type: string
          format: date-time
        likeCount:
          type: integer
          format: int32
        views:
          type: integer
          format: int32
    BoardSearchDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        brgRedDate:
          type: string
          format: date-time
        likeCount:
          type: integer
          format: int32
        views:
          type: integer
          format: int32
        brdTitle:
          type: string
        brdContent:
          type: string
        memNickname:
          type: string
    BoardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        brdTitle:
          type: string
        brdContent:
          type: string
        memNickname:
          type: string
        memEmail:
          type: string
        brgRedDate:
          type: string
          format: date-time
        bookmarkCount:
          type: integer
          format: int32
        likeCount:
          type: integer
          format: int32
        dislikeCount:
          type: integer
          format: int32
        reportCount:
          type: integer
          format: int32
        commentCount:
          type: integer
          format: int32
        comments:
          type: array
          items:
            "$ref": "#/components/schemas/CommentDto"
        views:
          type: integer
          format: int32
    Animation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        backDropPath:
          type: string
        releaseDate:
          type: string
          format: date
        voteAverage:
          type: number
          format: double
        popularity:
          type: number
          format: double
        runtime:
          type: integer
          format: int32
        genres:
          type: array
          items:
            "$ref": "#/components/schemas/Genre"
        directors:
          type: array
          items:
            "$ref": "#/components/schemas/Director"
        videos:
          type: array
          items:
            "$ref": "#/components/schemas/Video"
        recommendedAnimationIds:
          type: array
          items:
            type: integer
            format: int64
