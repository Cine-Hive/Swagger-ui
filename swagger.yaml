---
openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8081
  description: Generated server url
tags:
- name: Board Controller
  description: 게시글 CRUD, 검색, 전체 조회 기능을 제공하는 API
- name: Bookmark Controller
  description: 게시글의 즐겨찾기를 등록, 취소 및 전체 갯수 조회 기능을 제공하는 API
- name: Comment Controller
  description: '게시글 댓글의 CURD 기능을 제공하는 API '
- name: DisLike Controller
  description: 게시글의 싫어요를 등록, 취소 및 싫어요 수 조회 기능을 제공하는 API
- name: Like Controller
  description: 게시글의 좋아요를 등록, 취소 및 좋아요 수 조회 기능을 제공하는 API
- name: Report Controller
  description: 게시글의 신고하기 기능을 제공하는 API
paths:
  "/comment/board/{boardId}/update/{commentId}":
    put:
      tags:
      - Comment Controller
      summary: 댓글 수정
      description: 사용자가 등록한 특정 게시글의 댓글을 수정
      operationId: updateComment
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CommentDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommentDto"
  "/boards/{id}":
    put:
      tags:
      - Board Controller
      summary: 게시글 글 수정
      description: 사용자가 등록한 게시글에 대한 글을 수정
      operationId: updateBoard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Board"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Board"
  "/search":
    post:
      tags:
      - movie-controller
      summary: 클라이언트 검색
      description: 검색어를 받아 해당 검색어를 포함하는 Moive(animation 제외), 드라마(애니메이션 제외), 애니메이션을
        반환
      operationId: searchMovies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/report/{boardId}/users/{memEmail}":
    post:
      tags:
      - Report Controller
      summary: 신고하기 등록
      description: 특정 게시글에 대해 사용자가 신고하기를 등록
      operationId: reportBoard
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      - name: reason
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/register":
    post:
      tags:
      - user-controller
      summary: 회원가입
      description: 사용자 정보를 입력받아 일반 회원가입을 진행, 중복 검사 통과 후 user 테이블에 저장
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/preferredGenres":
    post:
      tags:
      - preferred-genre-controller
      summary: 선호 장르 선택
      description: 사용자가 드라마,영화,애니메이션 중 선택한 장르에 맞는 영상 반환
      operationId: getContentByGenres
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PreferredGenereDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Content"
  "/login":
    post:
      tags:
      - user-controller
      summary: 로그인
      description: user 테이블에 사용자가 입력한 ID와 비밀번호 쌍이 맞는지 확인 후 로그인
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: object
  "/like/{boardId}/users/{memEmail}":
    post:
      tags:
      - Like Controller
      summary: 좋아요 등록
      description: 특정 게시글에 대해 좋아요를 등록
      operationId: addLike
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
    delete:
      tags:
      - Like Controller
      summary: 좋아요 취소
      description: 특정 게시글에 대해 등록한 좋아요를 취소
      operationId: removeLike
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/dislike/{boardId}/users/{memEmail}":
    post:
      tags:
      - DisLike Controller
      summary: 싫어요 등록
      description: 특정 게시글에 대한 싫어요를 등록
      operationId: addDisLike
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
    delete:
      tags:
      - DisLike Controller
      summary: 싫어요 취소
      description: 특정 게시글에 대해 등록한 싫어요를 취소
      operationId: removeDisLike
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/comment/{boardId}/{memEmail}":
    post:
      tags:
      - Comment Controller
      summary: 댓글 등록
      description: 특정 게시글에 대한 댓글을 추가
      operationId: addComment
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CommentDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CommentDto"
  "/bookmark/{boardId}/users/{memEmail}":
    post:
      tags:
      - Bookmark Controller
      summary: 즐겨찾기 등록
      description: 특정 게시글의 즐겨찾기를 등록
      operationId: addBookmark
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
    delete:
      tags:
      - Bookmark Controller
      summary: 즐겨찾기 취소
      description: 특정 게시글에 대해 등록한 즐겨찾기를 삭제
      operationId: removeBookmark
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/boards/create":
    post:
      tags:
      - Board Controller
      summary: 게시글 글 등록
      description: 게시판 기능에서 글 등록
      operationId: createBoard
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BoardDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Board"
  "/api/auth/session":
    post:
      tags:
      - kakao-user-controller
      summary: 세션 생성
      description: 카카오 로그인 후 인증된 사용자의 정보를 세션에 저장
      operationId: createSession
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/KakaoUserInfo"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/naver/register":
    post:
      tags:
      - naver-user-controller
      summary: 네이버 사용자 등록
      description: 네이버 사용자 정보를 입력받아 회원가입을 진행, 중복 검사 통과 후 naver_user 테이블에 저장
      operationId: registerUserDetails
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/auth/logout":
    get:
      tags:
      - kakao-user-controller
      summary: 로그아웃 후 리다이렉션
      description: 로그아웃 후 클라이언트를 로그인 페이지로 리다이렉션
      operationId: handleLogoutRedirect
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/RedirectView"
    post:
      tags:
      - kakao-user-controller
      summary: 카카오 로그아웃
      description: 카카오 로그아웃을 위한 URL을 반환, 클라이언트에서 이 URL을 호출하여 로그아웃
      operationId: logout
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/kakao/register":
    post:
      tags:
      - kakao-user-controller
      summary: 카카오 사용자 회원가입
      description: 카카오 로그인 후, 사용자가 추가 정보를 입력하면 이를 기반으로  kakao_user 테이블에 저장
      operationId: registerUserDetails_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/auth/google/register":
    post:
      tags:
      - google-user-controller
      summary: 구글 회원가입
      description: 사용자가 제공한 정보로 회원가입하고 google_user 테이블에 저장
      operationId: registerUserDetails_2
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/top_movie":
    get:
      tags:
      - movie-controller
      summary: Topmovie DB에 저장
      description: api로 받아온 topmovie 목록을 topmovie 테이블에 저장
      operationId: getTopMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/now_playing_movies":
    get:
      tags:
      - movie-controller
      summary: DB에 저장된 영화 출력
      description: movie 테이블에 저장된 movie 정보를 리스트 형태로 반환
      operationId: getNowPlayingMoviesList
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Movie"
  "/now_playing":
    get:
      tags:
      - movie-controller
      summary: 현재 상영중인 영화 DB에 저장
      description: 현재 상영중인 영화 목록을 movie 테이블에 저장
      operationId: getNowPlayingMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/movies":
    get:
      tags:
      - movie-controller
      summary: DB에서 영화 받아오기
      description: movie 테이블에 저장된 모든 movie 정보를 리스트 형태로 반환
      operationId: getAllMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Movie"
  "/movies/{id}":
    get:
      tags:
      - movie-controller
      summary: Moive 상세 페이지 조회
      description: 해당 Moive ID로 영화 상세 정보를 상세 페이지에 반환, 존재하지 않는 경우 404 응답을 반환
      operationId: getMovieById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Movie"
  "/like/{boardId}/count":
    get:
      tags:
      - Like Controller
      summary: 좋아요 갯수 조회
      description: 특정 게시글에 대해 좋아요의 전체 갯수를 조회
      operationId: getLikeCount
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int32
  "/get_topmovies":
    get:
      tags:
      - movie-controller
      summary: 평점순 영화 받아오기
      description: topmovie 테이블에 저장된 topmovie 정보를 리스트 형태로 반환
      operationId: getTopRatedMoviesList
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TopMovie"
  "/dramas":
    get:
      tags:
      - drama-controller
      summary: Drama 목록 받아오기
      description: drama 테이블에 저장된 모든 drama 정보를 리스트 형태로 반환
      operationId: getDramas
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Drama"
  "/dramas/{id}":
    get:
      tags:
      - drama-controller
      summary: Drama 상세 페이지 받아오기
      description: 해당 Drama ID로 영화 상세 정보를 상세 페이지에 반환, 존재하지 않는 경우 404 응답을 반환
      operationId: getDramaById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Drama"
  "/dislike/{boardId}/count":
    get:
      tags:
      - DisLike Controller
      summary: 싫어요 갯수 조회
      description: 특정 게시글에 대해 싫어요의 총 갯수를 조회
      operationId: getDisLikeCount
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int32
  "/comment/all/board/{boardId}":
    get:
      tags:
      - Comment Controller
      summary: 댓글 조회
      description: 특정 게시글의 전채 댓글 수 조회
      operationId: getCommnetsByBoard
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CommentDto"
  "/checknickname/{memNickname}":
    get:
      tags:
      - user-controller
      summary: 닉네임 중복 확인
      description: user 테이블에 해당 닉네임이 이미 등록되어 있는지 확인
      operationId: checkmemNickname
      parameters:
      - name: memNickname
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: boolean
  "/checkemail/{memEmail}":
    get:
      tags:
      - user-controller
      summary: 이메일 중복 확인
      description: user 테이블에 해당 이메일이 이미 등록되어 있는지 확인
      operationId: checkmemEmail
      parameters:
      - name: memEmail
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: boolean
  "/bookmark/{boardId}/count":
    get:
      tags:
      - Bookmark Controller
      summary: '즐겨찾기 수 조회 '
      description: 특정 게시글에 대해 전체 즐겨찾기 수 조회
      operationId: getBookmarkCount
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: integer
                format: int32
  "/boards":
    get:
      tags:
      - Board Controller
      summary: 게시글 리스트 조회
      description: 사용자들이 등록한 게시글들의 전체 목록을 조회
      operationId: getBoards
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BoardDto"
  "/boards/search":
    get:
      tags:
      - Board Controller
      summary: 게시글 검색
      description: 제목, 내용 및 닉네임을 포함하여 등록한 게시글을 모두 검색
      operationId: searchBoards
      parameters:
      - name: keyword
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BoardDto"
  "/boards/detail/{id}":
    get:
      tags:
      - Board Controller
      summary: 게시글 상세 페이지
      description: 등록한 게시글에 대한 상세 페이지
      operationId: getDetailBoard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BoardDto"
  "/api/auth/naver":
    get:
      tags:
      - naver-user-controller
      summary: 네이버 로그인 리다이렉션
      description: 사용자를 네이버 OAuth 로그인 페이지로 리다이렉션하여 네이버 인증을 시작
      operationId: naverLoginRedirect
      responses:
        '200':
          description: OK
  "/api/auth/naver/success":
    get:
      tags:
      - naver-user-controller
      summary: 네이버 로그인 성공 페이지
      description: 네이버 로그인 성공 시 사용자 정보를 반환
      operationId: naverSuccessPage
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/naver/check-user":
    get:
      tags:
      - naver-user-controller
      summary: 네이버 사용자 중복 확인
      description: 해당 네이버 ID가 이미 등록되어 있는지 확인
      operationId: checkUser
      parameters:
      - name: naverId
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: boolean
  "/api/auth/naver/callback":
    get:
      tags:
      - naver-user-controller
      summary: 네이버 OAuth 로그인 및 사용자 등록
      description: 네이버 OAuth 인증 후 사용자 정보를 이용하여 로그인하거나, 신규 사용자를 등록하고 로그인 후 사용자를 리다이렉션
      operationId: naverCallback
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      - name: state
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
  "/api/auth/kakao":
    get:
      tags:
      - kakao-user-controller
      summary: 카카오 로그인
      description: 카카오 OAuth 로그인 페이지로 사용자를 리다이렉션하여 카카오 인증을 시작
      operationId: kakaoLogin
      responses:
        '200':
          description: OK
  "/api/auth/kakao/success":
    get:
      tags:
      - kakao-user-controller
      summary: 카카오 로그인 성공 정보 반환
      description: 세션에서 카카오 로그인한 사용자 정보를 가져와 반환, 인증되지 않은 사용자는 401 오류를 반환
      operationId: successPage
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/kakao/check-user":
    get:
      tags:
      - kakao-user-controller
      summary: 카카오 사용자 중복 확인
      description: 카카오 사용자 ID를 이용하여 사용자가 이미 존재하는지 확인
      operationId: checkUser_1
      parameters:
      - name: kakaoId
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: boolean
  "/api/auth/kakao/callback":
    get:
      tags:
      - kakao-user-controller
      summary: 카카오 OAuth 로그인 및 사용자 등록
      description: 카카오 OAuth 인증 후 사용자 정보를 이용하여 로그인하거나, 신규 사용자를 등록하고 로그인 후 사용자를 리다이렉션
      operationId: kakaoCallback
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
  "/api/auth/google":
    get:
      tags:
      - google-user-controller
      summary: 구글 로그인 리다이렉션
      description: 사용자를 구글 OAuth 로그인 페이지로 리다이렉션하여 구글 인증을 시작
      operationId: googleLoginRedirect
      responses:
        '200':
          description: OK
  "/api/auth/google/success":
    get:
      tags:
      - google-user-controller
      summary: 구글 인증 성공
      description: 구글 OAuth 인증 성공 후 세션에 저장된 사용자 정보를 반환, 사용자가 인증되지 않은 경우 401 상태 코드와
        함께 오류 메시지를 반환
      operationId: googleSuccessPage
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/auth/google/check-user":
    get:
      tags:
      - google-user-controller
      summary: 구글 사용자 중복 확인
      description: 해당 구글 ID가 이미 등록되어 있는지 확인
      operationId: checkUser_2
      parameters:
      - name: googleId
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: boolean
  "/api/auth/google/callback":
    get:
      tags:
      - google-user-controller
      summary: 구글 OAuth 로그린 및 사용자 등록
      description: 구글 OAuth 인증 후 구글 사용자 정보를 이용하여 로그인하거나 신규 사용자를 등록, 인증 후 해당 사용자를 리다이렉션
      operationId: googleCallback
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
  "/animations":
    get:
      tags:
      - animation-controller
      summary: Animation 목록 받아오기
      description: animation 테이블에 저장된 모든 animation 정보를 리스트 형태로 반환
      operationId: getMovies
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Animation"
  "/animations/{id}":
    get:
      tags:
      - animation-controller
      summary: Animation 상세 페이지 받아오기
      description: 해당 Animation ID로 Animation 정보를 상세 페이지에 반환, 존재하지 않는 경우 404 응답을 반환
      operationId: getAnimationById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Animation"
  "/comment/board/{boardId}/delete/{commentId}":
    delete:
      tags:
      - Comment Controller
      summary: 댓글 삭제
      description: 사용자가 등록한 특정 게시글의 댓글을 삭제
      operationId: deleteComment
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
  "/boards/delete/{id}":
    delete:
      tags:
      - Board Controller
      summary: 게시글 글 삭제
      description: 사용자가 등록한 게시글에 대한 삭제
      operationId: deleteBoard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
components:
  schemas:
    CommentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        memNickname:
          type: string
        memEmail:
          type: string
        createdAt:
          type: string
          format: date-time
    Board:
      type: object
      properties:
        id:
          type: integer
          format: int64
        brdTitle:
          type: string
        brdContent:
          type: string
        brdRegDate:
          type: string
          format: date-time
        views:
          type: integer
          format: int32
        likes:
          type: array
          items:
            "$ref": "#/components/schemas/BoardLike"
        likeCount:
          type: integer
          format: int32
        dislikes:
          type: array
          items:
            "$ref": "#/components/schemas/BoardDisLike"
        dislikeCount:
          type: integer
          format: int32
          writeOnly: true
        reportCount:
          type: integer
          format: int32
        reports:
          type: array
          items:
            "$ref": "#/components/schemas/Report"
        user:
          "$ref": "#/components/schemas/User"
        bookmarks:
          type: array
          items:
            "$ref": "#/components/schemas/Bookmark"
        bookmarkCount:
          type: integer
          format: int32
        comments:
          type: array
          items:
            "$ref": "#/components/schemas/Comment"
        commentCount:
          type: integer
          format: int32
        disLikeCount:
          type: integer
          format: int32
    BoardDisLike:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        board:
          "$ref": "#/components/schemas/Board"
    BoardLike:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        board:
          "$ref": "#/components/schemas/Board"
    Bookmark:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        board:
          "$ref": "#/components/schemas/Board"
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        board:
          "$ref": "#/components/schemas/Board"
        user:
          "$ref": "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
    Report:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          "$ref": "#/components/schemas/User"
        board:
          "$ref": "#/components/schemas/Board"
        reason:
          type: string
        reportedAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        mem_id:
          type: integer
          format: int64
        memPw:
          type: string
        memEmail:
          type: string
        memName:
          type: string
        memNickname:
          type: string
        memSex:
          type: string
        memRegisterDatetime:
          type: string
          format: date-time
        memType:
          type: string
        genres:
          type: array
          items:
            type: string
    UserDto:
      type: object
      properties:
        exists:
          type: boolean
        mem_id:
          type: integer
          format: int64
        memPassword:
          type: string
        memName:
          type: string
        memEmail:
          type: string
        memNickname:
          type: string
        memSex:
          type: string
        memType:
          type: string
        memRegisterDatetime:
          type: string
        genres:
          type: array
          items:
            type: string
    PreferredGenereDto:
      type: object
      properties:
        genres:
          type: array
          items:
            type: string
    Content:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        genre:
          type: string
    LoginDto:
      type: object
      properties:
        memEmail:
          type: string
        memPassword:
          type: string
    BoardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        brdTitle:
          type: string
        brdContent:
          type: string
        memNickname:
          type: string
        memEmail:
          type: string
        brgRedDate:
          type: string
          format: date-time
        bookmarkCount:
          type: integer
          format: int32
        likeCount:
          type: integer
          format: int32
        dislikeCount:
          type: integer
          format: int32
        reportCount:
          type: integer
          format: int32
        commentCount:
          type: integer
          format: int32
    KakaoUserInfo:
      type: object
      properties:
        memEmail:
          type: string
        memNickname:
          type: string
        memName:
          type: string
        genres:
          type: array
          items:
            type: string
    Actor:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        originalName:
          type: string
        role:
          type: string
        gender:
          type: integer
          format: int32
    Director:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        gender:
          type: integer
          format: int32
        job:
          type: string
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        backdropPath:
          type: string
        releaseDate:
          type: string
          format: date
        genreIds:
          type: array
          items:
            type: integer
            format: int32
        voteAverage:
          type: number
          format: double
        voteCount:
          type: integer
          format: int32
        popularity:
          type: number
          format: double
        adult:
          type: boolean
        actors:
          type: array
          items:
            "$ref": "#/components/schemas/Actor"
        videos:
          type: array
          items:
            "$ref": "#/components/schemas/Video"
        director:
          "$ref": "#/components/schemas/Director"
    Video:
      type: object
      properties:
        id:
          type: integer
          format: int64
        videoKey:
          type: string
        name:
          type: string
        site:
          type: string
        type:
          type: string
    TopMovie:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        backdropPath:
          type: string
        releaseDate:
          type: string
          format: date
        genreIds:
          type: array
          items:
            type: integer
            format: int32
        voteAverage:
          type: number
          format: double
        voteCount:
          type: integer
          format: int32
        popularity:
          type: number
          format: double
        adult:
          type: boolean
    Drama:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        originalName:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        backdropPath:
          type: string
        firstAirDate:
          type: string
        voteAverage:
          type: number
          format: double
        voteCount:
          type: integer
          format: int32
        popularity:
          type: number
          format: double
        adult:
          type: boolean
        originalLanguage:
          type: string
        directors:
          type: array
          items:
            "$ref": "#/components/schemas/Director"
        genreIds:
          type: array
          items:
            type: integer
            format: int32
        actors:
          type: array
          items:
            "$ref": "#/components/schemas/Actor"
    ApplicationContext:
      type: object
      properties:
        parent:
          "$ref": "#/components/schemas/ApplicationContext"
        id:
          type: string
        displayName:
          type: string
        autowireCapableBeanFactory:
          "$ref": "#/components/schemas/AutowireCapableBeanFactory"
        startupDate:
          type: integer
          format: int64
        applicationName:
          type: string
        environment:
          "$ref": "#/components/schemas/Environment"
        beanDefinitionNames:
          type: array
          items:
            type: string
        beanDefinitionCount:
          type: integer
          format: int32
        parentBeanFactory:
          "$ref": "#/components/schemas/BeanFactory"
        classLoader:
          type: object
          properties:
            name:
              type: string
            registeredAsParallelCapable:
              type: boolean
            parent:
              type: object
              properties:
                name:
                  type: string
                registeredAsParallelCapable:
                  type: boolean
                unnamedModule:
                  type: object
                  properties:
                    name:
                      type: string
                    classLoader:
                      type: object
                      properties:
                        name:
                          type: string
                        registeredAsParallelCapable:
                          type: boolean
                        definedPackages:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              annotations:
                                type: array
                                items:
                                  type: object
                              declaredAnnotations:
                                type: array
                                items:
                                  type: object
                              sealed:
                                type: boolean
                              specificationTitle:
                                type: string
                              specificationVersion:
                                type: string
                              specificationVendor:
                                type: string
                              implementationTitle:
                                type: string
                              implementationVersion:
                                type: string
                              implementationVendor:
                                type: string
                        defaultAssertionStatus:
                          type: boolean
                          writeOnly: true
                    descriptor:
                      type: object
                      properties:
                        open:
                          type: boolean
                        automatic:
                          type: boolean
                    named:
                      type: boolean
                    annotations:
                      type: array
                      items:
                        type: object
                    declaredAnnotations:
                      type: array
                      items:
                        type: object
                    packages:
                      uniqueItems: true
                      type: array
                      items:
                        type: string
                    layer:
                      type: object
                definedPackages:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      annotations:
                        type: array
                        items:
                          type: object
                      declaredAnnotations:
                        type: array
                        items:
                          type: object
                      sealed:
                        type: boolean
                      specificationTitle:
                        type: string
                      specificationVersion:
                        type: string
                      specificationVendor:
                        type: string
                      implementationTitle:
                        type: string
                      implementationVersion:
                        type: string
                      implementationVendor:
                        type: string
                defaultAssertionStatus:
                  type: boolean
                  writeOnly: true
            unnamedModule:
              type: object
              properties:
                name:
                  type: string
                classLoader:
                  type: object
                  properties:
                    name:
                      type: string
                    registeredAsParallelCapable:
                      type: boolean
                    definedPackages:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          annotations:
                            type: array
                            items:
                              type: object
                          declaredAnnotations:
                            type: array
                            items:
                              type: object
                          sealed:
                            type: boolean
                          specificationTitle:
                            type: string
                          specificationVersion:
                            type: string
                          specificationVendor:
                            type: string
                          implementationTitle:
                            type: string
                          implementationVersion:
                            type: string
                          implementationVendor:
                            type: string
                    defaultAssertionStatus:
                      type: boolean
                      writeOnly: true
                descriptor:
                  type: object
                  properties:
                    open:
                      type: boolean
                    automatic:
                      type: boolean
                named:
                  type: boolean
                annotations:
                  type: array
                  items:
                    type: object
                declaredAnnotations:
                  type: array
                  items:
                    type: object
                packages:
                  uniqueItems: true
                  type: array
                  items:
                    type: string
                layer:
                  type: object
            definedPackages:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  annotations:
                    type: array
                    items:
                      type: object
                  declaredAnnotations:
                    type: array
                    items:
                      type: object
                  sealed:
                    type: boolean
                  specificationTitle:
                    type: string
                  specificationVersion:
                    type: string
                  specificationVendor:
                    type: string
                  implementationTitle:
                    type: string
                  implementationVersion:
                    type: string
                  implementationVendor:
                    type: string
            defaultAssertionStatus:
              type: boolean
              writeOnly: true
    AutowireCapableBeanFactory:
      type: object
    BeanFactory:
      type: object
    Environment:
      type: object
      properties:
        activeProfiles:
          type: array
          items:
            type: string
        defaultProfiles:
          type: array
          items:
            type: string
    FilterRegistration:
      type: object
      properties:
        urlPatternMappings:
          type: array
          items:
            type: string
        servletNameMappings:
          type: array
          items:
            type: string
        name:
          type: string
        className:
          type: string
        initParameters:
          type: object
          additionalProperties:
            type: string
    HttpStatusCode:
      type: object
      properties:
        error:
          type: boolean
        is2xxSuccessful:
          type: boolean
        is4xxClientError:
          type: boolean
        is5xxServerError:
          type: boolean
        is1xxInformational:
          type: boolean
        is3xxRedirection:
          type: boolean
    JspConfigDescriptor:
      type: object
      properties:
        jspPropertyGroups:
          type: array
          items:
            "$ref": "#/components/schemas/JspPropertyGroupDescriptor"
        taglibs:
          type: array
          items:
            "$ref": "#/components/schemas/TaglibDescriptor"
    JspPropertyGroupDescriptor:
      type: object
      properties:
        buffer:
          type: string
        errorOnUndeclaredNamespace:
          type: string
        scriptingInvalid:
          type: string
        deferredSyntaxAllowedAsLiteral:
          type: string
        errorOnELNotFound:
          type: string
        trimDirectiveWhitespaces:
          type: string
        includeCodas:
          type: array
          items:
            type: string
        pageEncoding:
          type: string
        elIgnored:
          type: string
        includePreludes:
          type: array
          items:
            type: string
        isXml:
          type: string
        defaultContentType:
          type: string
        urlPatterns:
          type: array
          items:
            type: string
    RedirectView:
      type: object
      properties:
        applicationContext:
          "$ref": "#/components/schemas/ApplicationContext"
        servletContext:
          "$ref": "#/components/schemas/ServletContext"
        contentType:
          type: string
        requestContextAttribute:
          type: string
        staticAttributes:
          type: object
          additionalProperties:
            type: object
        exposePathVariables:
          type: boolean
        exposeContextBeansAsAttributes:
          type: boolean
          writeOnly: true
        exposedContextBeanNames:
          type: array
          writeOnly: true
          items:
            type: string
        beanName:
          type: string
        url:
          type: string
        contextRelative:
          type: boolean
          writeOnly: true
        http10Compatible:
          type: boolean
          writeOnly: true
        exposeModelAttributes:
          type: boolean
          writeOnly: true
        encodingScheme:
          type: string
          writeOnly: true
        statusCode:
          "$ref": "#/components/schemas/HttpStatusCode"
        expandUriTemplateVariables:
          type: boolean
          writeOnly: true
        propagateQueryParams:
          type: boolean
          writeOnly: true
        hosts:
          type: array
          items:
            type: string
        redirectView:
          type: boolean
        propagateQueryProperties:
          type: boolean
        attributes:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
        attributesMap:
          type: object
          additionalProperties:
            type: object
        attributesCSV:
          type: string
          writeOnly: true
    ServletContext:
      type: object
      properties:
        classLoader:
          type: object
          properties:
            name:
              type: string
            registeredAsParallelCapable:
              type: boolean
            definedPackages:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  annotations:
                    type: array
                    items:
                      type: object
                  declaredAnnotations:
                    type: array
                    items:
                      type: object
                  sealed:
                    type: boolean
                  specificationTitle:
                    type: string
                  specificationVersion:
                    type: string
                  specificationVendor:
                    type: string
                  implementationTitle:
                    type: string
                  implementationVersion:
                    type: string
                  implementationVendor:
                    type: string
            defaultAssertionStatus:
              type: boolean
              writeOnly: true
        majorVersion:
          type: integer
          format: int32
        minorVersion:
          type: integer
          format: int32
        attributeNames:
          type: object
        initParameterNames:
          type: object
        contextPath:
          type: string
        servletRegistrations:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/ServletRegistration"
        sessionCookieConfig:
          "$ref": "#/components/schemas/SessionCookieConfig"
        virtualServerName:
          type: string
        sessionTrackingModes:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            type: string
            enum:
            - COOKIE
            - URL
            - SSL
        sessionTimeout:
          type: integer
          format: int32
        servletContextName:
          type: string
        defaultSessionTrackingModes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - COOKIE
            - URL
            - SSL
        effectiveSessionTrackingModes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - COOKIE
            - URL
            - SSL
        jspConfigDescriptor:
          "$ref": "#/components/schemas/JspConfigDescriptor"
        requestCharacterEncoding:
          type: string
        effectiveMajorVersion:
          type: integer
          format: int32
        filterRegistrations:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/FilterRegistration"
        responseCharacterEncoding:
          type: string
        effectiveMinorVersion:
          type: integer
          format: int32
        serverInfo:
          type: string
    ServletRegistration:
      type: object
      properties:
        mappings:
          type: array
          items:
            type: string
        runAsRole:
          type: string
        name:
          type: string
        className:
          type: string
        initParameters:
          type: object
          additionalProperties:
            type: string
    SessionCookieConfig:
      type: object
      properties:
        domain:
          type: string
        maxAge:
          type: integer
          format: int32
        name:
          type: string
        path:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: string
        comment:
          type: string
          deprecated: true
        secure:
          type: boolean
        httpOnly:
          type: boolean
    TaglibDescriptor:
      type: object
      properties:
        taglibURI:
          type: string
        taglibLocation:
          type: string
    Animation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        backdropPath:
          type: string
        releaseDate:
          type: string
          format: date
        voteAverage:
          type: number
          format: double
        voteCount:
          type: integer
          format: int32
        popularity:
          type: number
          format: double
        genreIds:
          type: array
          items:
            type: integer
            format: int32
        directors:
          type: array
          items:
            "$ref": "#/components/schemas/Director"
        videos:
          type: array
          items:
            "$ref": "#/components/schemas/Video"
